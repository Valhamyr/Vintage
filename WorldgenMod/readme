## Overview
This folder contains files for a future world generation mod for Vintage Story.
The mod will introduce new terrain landforms while still mixing with vanilla ones.

## Creating a Worldgen Mod
Below is a minimal outline on how to structure and configure such a mod.

1. **Prepare the Mod Folder**
   - Keep all files inside `WorldgenMod/` (or your chosen folder).
   - Create a `modinfo.json` file describing the mod (see example below).
   - Place optional `modicon.png` alongside it.

2. **Folder Structure**
   Vintage Story expects assets under an `assets/<modid>/` domain.
   A simple layout for world generation looks like:
   ```
   WorldgenMod/
  ├─ assets/
  │  └─ worldgenmod/
  │      └─ worldgen/
  │          ├─ landforms.json
  │          └─ patches/
  │              ├─ landforms.json
  │              ├─ landformConfig.json
  │              └─ survival-worldgen-storystructures.json
   ├─ modinfo.json
   └─ modicon.png (optional)
   ```
   - `landforms.json` adds custom landform shapes read by the mod's code.
   - `patches/worldgen/landforms.json` injects those shapes into the vanilla worldgen list.
   - `landformConfig.json` defines how often each landform appears.
   - `survival-worldgen-storystructures.json` lets structures spawn on the new terrain.

3. **modinfo.json Example**
   ```json
   {
     "type": "content",
     "modid": "worldgenmod",
     "name": "Worldgen Demo",
     "version": "1.0.0",
     "authors": ["YourName"],
     "description": "Adds custom landmasses and mixes them with vanilla terrain.",
     "dependencies": {
       "game": "1.20.12"
     }
   }
   ```

4. **Configuring Landforms**
   - In `landforms.json`, define each new landform asset.
  - In `landformConfig.json`, assign weights so roughly 85% of generated chunks use your landforms and 15% use vanilla ones.
   - Weights are relative, so adjust numbers accordingly. Example snippet:
   ```json
   {
     "replace": false,
     "landforms": {
       "flatlands": { "weight": 100 },
       "sheercliffs": { "weight": 250 },
       "canyons": { "weight": 500 },
       "towercliffs": { "weight": 50 },
       "riceplateaus": { "weight": 1100 }
    }
  }
  ```
  (Vanilla landforms keep their existing weights, making about 15% of the total.)

With these weights, the `riceplateaus` landform now exceeds half of all custom
terrain generation, followed by `canyons` and `sheercliffs` in relative frequency.

5. **Allowing Structures to Spawn**
   - Patch `survival-worldgen-storystructures.json` so structures also target your new landforms.
   - Reference the landform names you added in `landforms.json`.

6. **Packaging**
   - Zip the contents of `WorldgenMod/` (not the folder itself) when distributing.
   - The final archive should contain `assets/`, `modinfo.json`, and optional `modicon.png`.

## Planned Landforms
The mod aims to implement the following terrain types:

- **Flatlands** – large expanses of almost level ground.
- **Sheer Cliffs** – abrupt vertical faces that rise sharply from surrounding areas.
- **Canyons with narrow paths** – deep ravines bordered by tall cliffs.
- **Tower Cliffs** – mostly flat areas punctuated by very tall, closely spaced pillars.
- **Multi-level Plateaus** – terraced landscape with flat tops at varying heights, similar to oversized rice fields.

Each landform will generate separately. When a new world is created, approximately 85% of terrain should come from these new landforms and the remaining 15% from vanilla ones. Structures from the `story` set will be able to spawn on all new landforms if configured in `survival-worldgen-storystructures.json`.

## Noise Samples

The `generate_noise_images.py` helper script renders example Perlin noise maps
based on the `noiseScale` plus the new octave and height arrays in a
`landforms.json` file. By default it looks for
`WorldgenMod/FixedCliffs/assets/fixedcliffs/worldgen/landforms.json`, but you
can specify another file with `--landforms-file`. Run the script with Python to
generate PNG images in a local `WorldgenMod/noise_samples/` directory. Use
`--size <N>` to set the pixel width and height (default 256×256) when previewing
larger areas. These preview images are not tracked in version control. By
default the script outputs a top-down heightmap. Use the `--cross-section` flag
to render a vertical preview instead.

### Parameter notes

* **terrainOctaves** – amplitude multipliers per Perlin octave. Larger numbers
  add sharper detail at that scale.
* **terrainYKeyPositions** – normalized height checkpoints that define where the
  landform changes vertically.
* **terrainYKeyThresholds** – blending values tied to each Y key that control
  how abruptly those changes occur.
* **threshold** – minimum noise value required for the landform to generate at a
  given coordinate. Higher values make the feature rarer and more isolated.

### Rice plateau layout

The `riceplateaus` landform forms four wide terraces that rise from low
ground. With a `baseHeight` of `0.05` and a `heightOffset` of `0.55`, the top
layer sits around 60 % of world height. A small `noiseScale` (`0.00015`) keeps
the steps smooth. The shape is generated from stacked disks, each 60 % the
radius of the one below it. The outermost disk size is set by `baseRadius` and
`plateauCount` controls how many tiers are created (default 4):

```json
"baseRadius": 200,
"plateauCount": 4,
"terrainYKeyPositions": [0.15, 0.30, 0.45, 0.60],
"terrainYKeyThresholds": [1, 0.8, 0.6, 0]
```

Each plateau includes a generous rim before the next step, leaving room for
large builds.



