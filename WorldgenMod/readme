## Overview
This folder contains files for a world generation mod that simply rebalances
existing Vanilla Story landforms.
Instead of defining custom shapes, the mod boosts the weight of a few vanilla
terrain types so they dominate the landscape.

## Creating a Worldgen Mod
Below is a minimal outline on how to structure and configure such a mod.

1. **Prepare the Mod Folder**
   - Keep all files inside `WorldgenMod/` (or your chosen folder).
   - Create a `modinfo.json` file describing the mod (see example below).
   - Place optional `modicon.png` alongside it.

2. **Folder Structure**
   Vintage Story expects assets under an `assets/<modid>/` domain.
   A simple layout for world generation looks like:
   ```
   WorldgenMod/
  ├─ assets/
  │  └─ worldgenmod/
  │      └─ worldgen/
  │          └─ patches/
  │              └─ landformConfig.json
   ├─ modinfo.json
   └─ modicon.png (optional)
   ```
  - `landformConfig.json` defines how often each vanilla landform appears.

3. **modinfo.json Example**
   ```json
   {
     "type": "content",
     "modid": "worldgenmod",
     "name": "Worldgen Demo",
     "version": "1.0.0",
     "authors": ["YourName"],
     "description": "Adds custom landmasses and mixes them with vanilla terrain.",
     "dependencies": {
       "game": "1.20.12"
     }
   }
   ```




6. **Packaging**
   - Zip the contents of `WorldgenMod/` (not the folder itself) when distributing.
   - The final archive should contain `assets/`, `modinfo.json`, and optional `modicon.png`.

## Landform selection

This mod greatly increases the weight of a few vanilla landforms so they appear in roughly 99% of world generation. Edit `patches/worldgen/landformConfig.json` to adjust which ones are favoured.

## Noise Samples

The `generate_noise_images.py` helper script renders example Perlin maps based on the noise settings in `patches/worldgen/landformConfig.json`. Use `--landforms-file` to test another file.
`--size <N>` sets the map resolution and `--zoom <factor>` magnifies features when needed.

### Parameter notes

* **terrainOctaves** – amplitude multipliers per Perlin octave. Larger numbers
  add sharper detail at that scale.
* **terrainYKeyPositions** – normalized height checkpoints that define where the
  landform changes vertically.
* **terrainYKeyThresholds** – blending values tied to each Y key that control
  how abruptly those changes occur.
* **threshold** – minimum noise value required for the landform to generate at a
  given coordinate. Higher values make the feature rarer and more isolated.

